<?php

/**
 * @file
 * General functions and hook implementations.
 *
 * @see http://hammerjs.github.io/
 */

/**
 * Define chosen library url.
 */
define('HAMMERJS_WEBSITE_URL', 'http://hammerjs.github.io');

/**
 * Implements hook_library_info_alter().
 */
function hammerjs_library_info_alter(array &$libraries, $module) {
  if ($module == 'hammerjs') {
    if (isset($libraries['hammerjs'])) {
      // Set hammerjs library path.
      $hammerjs_path = '/' . _hammerjs_get_path();
      $hammer = $hammerjs_path . '/hammer.min.js';
      $libraries['hammerjs']['js'][$hammer] = array(
        'minified' => TRUE,
      );
    }
  }
}

/**
 * Get the location of the hammer library.
 *
 * @return string
 *   The location of the library, or FALSE if the library isn't installed.
 */
function _hammerjs_get_path() {
  if (function_exists('libraries_get_path')) {
    return libraries_get_path('hammer.js');
  }

  // The following logic is taken from libraries_get_libraries()
  $searchdir = array();

  // Similar to 'modules' and 'themes' directories inside an installation
  // profile, installation profiles may want to place libraries into a
  // 'libraries' directory.
  $searchdir[] = 'profiles/' . drupal_get_profile() . '/libraries';

  // Always search libraries.
  $searchdir[] = 'libraries';

  // Also search sites/<domain>/*.
  $searchdir[] = \Drupal::service('site.path') . '/libraries';

  foreach ($searchdir as $dir) {
    if (file_exists($dir . '/hammer.js/hammer.min.js')) {
      return $dir . '/hammer.js';
    }
  }

  return FALSE;
}
